// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/pipeline/handle.go

// Package mock_pipeline is a generated GoMock package.
package mock_pipeline

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	request "github.com/supermetrolog/framework/pkg/http/interfaces/request"
	response "github.com/supermetrolog/framework/pkg/http/interfaces/response"
	pipeline "github.com/supermetrolog/framework/pkg/http/pipeline"
)

// MockHandle is a mock of Handle interface.
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockHandleMockRecorder
}

// MockHandleMockRecorder is the mock recorder for MockHandle.
type MockHandleMockRecorder struct {
	mock *MockHandle
}

// NewMockHandle creates a new mock instance.
func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &MockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandle) EXPECT() *MockHandleMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHandle) Handle(res response.ResponseWriter, req request.Request, next pipeline.Handle) (response.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", res, req, next)
	ret0, _ := ret[0].(response.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockHandleMockRecorder) Handle(res, req, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandle)(nil).Handle), res, req, next)
}
