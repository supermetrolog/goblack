// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/pipeline/handler.go

// Package mock_pipeline is a generated GoMock package.
package mock_pipeline

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	request "github.com/supermetrolog/framework/pkg/http/interfaces/request"
	response "github.com/supermetrolog/framework/pkg/http/interfaces/response"
	pipeline "github.com/supermetrolog/framework/pkg/http/pipeline"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockHandler) Handler(res response.ResponseWriter, req request.Request) (response.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", res, req)
	ret0, _ := ret[0].(response.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockHandlerMockRecorder) Handler(res, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHandler)(nil).Handler), res, req)
}

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockMiddleware) Handler(res response.ResponseWriter, req request.Request, next pipeline.Handler) (response.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", res, req, next)
	ret0, _ := ret[0].(response.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockMiddlewareMockRecorder) Handler(res, req, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockMiddleware)(nil).Handler), res, req, next)
}
