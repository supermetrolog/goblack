// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/interfaces/handler/handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	handler "github.com/supermetrolog/goblack/pkg/http/interfaces/handler"
	httpcontext "github.com/supermetrolog/goblack/pkg/http/interfaces/httpcontext"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockHandler) Handler(c httpcontext.Context) (httpcontext.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", c)
	ret0, _ := ret[0].(httpcontext.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockHandlerMockRecorder) Handler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHandler)(nil).Handler), c)
}

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockMiddleware) Handler(c httpcontext.Context, next handler.Handler) (httpcontext.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", c, next)
	ret0, _ := ret[0].(httpcontext.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockMiddlewareMockRecorder) Handler(c, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockMiddleware)(nil).Handler), c, next)
}
