// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/interfaces/response/response.go

// Package mock_response is a generated GoMock package.
package mock_response

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	response "github.com/supermetrolog/framework/pkg/http/interfaces/response"
)

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockResponse) Content() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Content indicates an expected call of Content.
func (mr *MockResponseMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockResponse)(nil).Content))
}

// Headers mocks base method.
func (m *MockResponse) Headers() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockResponseMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockResponse)(nil).Headers))
}

// StatusCode mocks base method.
func (m *MockResponse) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockResponseMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockResponse)(nil).StatusCode))
}

// MockResponseWriter is a mock of ResponseWriter interface.
type MockResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterMockRecorder
}

// MockResponseWriterMockRecorder is the mock recorder for MockResponseWriter.
type MockResponseWriterMockRecorder struct {
	mock *MockResponseWriter
}

// NewMockResponseWriter creates a new mock instance.
func NewMockResponseWriter(ctrl *gomock.Controller) *MockResponseWriter {
	mock := &MockResponseWriter{ctrl: ctrl}
	mock.recorder = &MockResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseWriter) EXPECT() *MockResponseWriterMockRecorder {
	return m.recorder
}

// AddHeader mocks base method.
func (m *MockResponseWriter) AddHeader(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHeader", arg0)
}

// AddHeader indicates an expected call of AddHeader.
func (mr *MockResponseWriterMockRecorder) AddHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHeader", reflect.TypeOf((*MockResponseWriter)(nil).AddHeader), arg0)
}

// AddHeaders mocks base method.
func (m *MockResponseWriter) AddHeaders(arg0 []map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHeaders", arg0)
}

// AddHeaders indicates an expected call of AddHeaders.
func (mr *MockResponseWriterMockRecorder) AddHeaders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHeaders", reflect.TypeOf((*MockResponseWriter)(nil).AddHeaders), arg0)
}

// HtmlResponse mocks base method.
func (m *MockResponseWriter) HtmlResponse() (response.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HtmlResponse")
	ret0, _ := ret[0].(response.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HtmlResponse indicates an expected call of HtmlResponse.
func (mr *MockResponseWriterMockRecorder) HtmlResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HtmlResponse", reflect.TypeOf((*MockResponseWriter)(nil).HtmlResponse))
}

// JsonResponse mocks base method.
func (m *MockResponseWriter) JsonResponse() (response.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonResponse")
	ret0, _ := ret[0].(response.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JsonResponse indicates an expected call of JsonResponse.
func (mr *MockResponseWriterMockRecorder) JsonResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonResponse", reflect.TypeOf((*MockResponseWriter)(nil).JsonResponse))
}

// Response mocks base method.
func (m *MockResponseWriter) Response() response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response")
	ret0, _ := ret[0].(response.Response)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockResponseWriterMockRecorder) Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockResponseWriter)(nil).Response))
}

// SetContent mocks base method.
func (m *MockResponseWriter) SetContent(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContent", arg0)
}

// SetContent indicates an expected call of SetContent.
func (mr *MockResponseWriterMockRecorder) SetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContent", reflect.TypeOf((*MockResponseWriter)(nil).SetContent), arg0)
}

// SetStatusCode mocks base method.
func (m *MockResponseWriter) SetStatusCode(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusCode", arg0)
}

// SetStatusCode indicates an expected call of SetStatusCode.
func (mr *MockResponseWriterMockRecorder) SetStatusCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusCode", reflect.TypeOf((*MockResponseWriter)(nil).SetStatusCode), arg0)
}
