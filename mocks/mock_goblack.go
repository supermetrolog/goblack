// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/supermetrolog/goblack (interfaces: Pipeline,Router,Handler,Middleware,Context,Response,Writer)

// Package mock_goblack is a generated GoMock package.
package mock_goblack

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	goblack "github.com/supermetrolog/goblack"
)

// MockPipeline is a mock of Pipeline interface.
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline.
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance.
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockPipeline) Handler(arg0 goblack.Context, arg1 goblack.Handler) (goblack.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", arg0, arg1)
	ret0, _ := ret[0].(goblack.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockPipelineMockRecorder) Handler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockPipeline)(nil).Handler), arg0, arg1)
}

// Pipe mocks base method.
func (m *MockPipeline) Pipe(arg0 goblack.Middleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pipe", arg0)
}

// Pipe indicates an expected call of Pipe.
func (mr *MockPipelineMockRecorder) Pipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockPipeline)(nil).Pipe), arg0)
}

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockRouter) DELETE(arg0 string, arg1 goblack.Handler, arg2 ...goblack.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DELETE", varargs...)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockRouterMockRecorder) DELETE(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockRouter)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m *MockRouter) GET(arg0 string, arg1 goblack.Handler, arg2 ...goblack.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockRouterMockRecorder) GET(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockRouter)(nil).GET), varargs...)
}

// HEAD mocks base method.
func (m *MockRouter) HEAD(arg0 string, arg1 goblack.Handler, arg2 ...goblack.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "HEAD", varargs...)
}

// HEAD indicates an expected call of HEAD.
func (mr *MockRouterMockRecorder) HEAD(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockRouter)(nil).HEAD), varargs...)
}

// OPTIONS mocks base method.
func (m *MockRouter) OPTIONS(arg0 string, arg1 goblack.Handler, arg2 ...goblack.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "OPTIONS", varargs...)
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockRouterMockRecorder) OPTIONS(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockRouter)(nil).OPTIONS), varargs...)
}

// PATCH mocks base method.
func (m *MockRouter) PATCH(arg0 string, arg1 goblack.Handler, arg2 ...goblack.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PATCH", varargs...)
}

// PATCH indicates an expected call of PATCH.
func (mr *MockRouterMockRecorder) PATCH(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockRouter)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockRouter) POST(arg0 string, arg1 goblack.Handler, arg2 ...goblack.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "POST", varargs...)
}

// POST indicates an expected call of POST.
func (mr *MockRouterMockRecorder) POST(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockRouter)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockRouter) PUT(arg0 string, arg1 goblack.Handler, arg2 ...goblack.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PUT", varargs...)
}

// PUT indicates an expected call of PUT.
func (mr *MockRouterMockRecorder) PUT(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockRouter)(nil).PUT), varargs...)
}

// ServeHTTP mocks base method.
func (m *MockRouter) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockRouterMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRouter)(nil).ServeHTTP), arg0, arg1)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockHandler) Handler(arg0 goblack.Context) (goblack.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", arg0)
	ret0, _ := ret[0].(goblack.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockHandlerMockRecorder) Handler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHandler)(nil).Handler), arg0)
}

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockMiddleware) Handler(arg0 goblack.Context, arg1 goblack.Handler) (goblack.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", arg0, arg1)
	ret0, _ := ret[0].(goblack.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler.
func (mr *MockMiddlewareMockRecorder) Handler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockMiddleware)(nil).Handler), arg0, arg1)
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Param mocks base method.
func (m *MockContext) Param(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockContextMockRecorder) Param(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockContext)(nil).Param), arg0)
}

// Request mocks base method.
func (m *MockContext) Request() *http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockContextMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockContext)(nil).Request))
}

// Writer mocks base method.
func (m *MockContext) Writer() goblack.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer")
	ret0, _ := ret[0].(goblack.Writer)
	return ret0
}

// Writer indicates an expected call of Writer.
func (mr *MockContextMockRecorder) Writer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockContext)(nil).Writer))
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockResponse) Content() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Content indicates an expected call of Content.
func (mr *MockResponseMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockResponse)(nil).Content))
}

// Headers mocks base method.
func (m *MockResponse) Headers() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockResponseMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockResponse)(nil).Headers))
}

// StatusCode mocks base method.
func (m *MockResponse) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockResponseMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockResponse)(nil).StatusCode))
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// HTML mocks base method.
func (m *MockWriter) HTML() (goblack.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTML")
	ret0, _ := ret[0].(goblack.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTML indicates an expected call of HTML.
func (mr *MockWriterMockRecorder) HTML() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockWriter)(nil).HTML))
}

// JSON mocks base method.
func (m *MockWriter) JSON() (goblack.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSON")
	ret0, _ := ret[0].(goblack.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSON indicates an expected call of JSON.
func (mr *MockWriterMockRecorder) JSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockWriter)(nil).JSON))
}

// Write mocks base method.
func (m *MockWriter) Write(arg0 interface{}) goblack.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(goblack.Writer)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), arg0)
}

// WriteHeader mocks base method.
func (m *MockWriter) WriteHeader(arg0, arg1 string) goblack.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHeader", arg0, arg1)
	ret0, _ := ret[0].(goblack.Writer)
	return ret0
}

// WriteHeader indicates an expected call of WriteHeader.
func (mr *MockWriterMockRecorder) WriteHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockWriter)(nil).WriteHeader), arg0, arg1)
}

// WriteStatus mocks base method.
func (m *MockWriter) WriteStatus(arg0 int) goblack.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStatus", arg0)
	ret0, _ := ret[0].(goblack.Writer)
	return ret0
}

// WriteStatus indicates an expected call of WriteStatus.
func (mr *MockWriterMockRecorder) WriteStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStatus", reflect.TypeOf((*MockWriter)(nil).WriteStatus), arg0)
}

// XML mocks base method.
func (m *MockWriter) XML() (goblack.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XML")
	ret0, _ := ret[0].(goblack.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XML indicates an expected call of XML.
func (mr *MockWriterMockRecorder) XML() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XML", reflect.TypeOf((*MockWriter)(nil).XML))
}
